// createUserWithEmailAndPassword(
    //   this.auth,
    //   'test@gmail.com',
    //   '12334678'
    // ).then(
    //   (res) => {
    //     console.log(res, 'ress');
    //   },
    //   (err) => {
    //     console.log(err, 'err');
    //   }
    // );
    // signInWithEmailAndPassword("test@gmail.com",'123')
    // const userRef = collection(this.firestore, 'users');
    // const whereCond = query(userRef, where('role', '==', 'ADMIN'));
    // collectionData(whereCond, { idField: 'id' }).subscribe((res) => {
    //   console.log(res, 'ress');
    // });
    // collectionData(whereCond, { idField: 'id' })
    //   .pipe(take(1))
    //   .subscribe((res) => {
    //     console.log(res, 'ress');
    //     // res.forEach((item: any) => {
    //     //   console.log(item.id, 'item');
    //     //   const docRef = doc(this.firestore, 'users/' + item.id);
    //     //   updateDoc(docRef, {
    //     //     role: 'ADMIN',
    //     //   });
    //     // });
    //   });
    // const docRef = doc(this.firestore, 'users/00fuFyOyd5RGhNLwnuID');
    // addDoc(userRef, {
    //   name: 'mani',
    //   email: 'mani@gmail.com',
    //   role: 'ADMIN',
    // });
    // getDoc()
    // updateDoc(docRef, {
    //   department: 'CS',
    //   designation: 'Staff',
    //   email: 'test@gmail.com',
    //   name: 'Manikandn',
    // });



    cordova-res android --skip-config --copy

    running cmd => ionic capacitor run android --l --external

    to create apk file => student forum


Ionic lifecycle

https://ionicframework.com/docs/angular/lifecycle?_gl=1*b22nlw*_ga*MTkzMzkzMzM4LjE2NzIwNTc1MTc.*_ga_REH9TJF6KF*MTY3NTcwNDgyMC40MS4xLjE2NzU3MDQ5MjUuMC4wLjA.



  ionViewDidEnter() {
    console.log('enterned in login page');
  }

  ionViewDidLeave() {}



  https://cssgradient.io/gradient-backgrounds/

  https://cssgradient.io/swatches/



  const postRef = collection(this.firestore, 'posts');
    const first = query(postRef, orderBy('postedOn'), limit(5));
    const documentSnapshots = await getDocs(first);
    const lastVisible =
      documentSnapshots.docs[documentSnapshots.docs.length - 1];
    const queryObj = query(
      postRef,
      orderBy('postedOn', 'desc'),
      startAfter(lastVisible),
      limit(5)
    );
    collectionData(queryObj).subscribe((result) => {
      console.log(result, 'result');
      event.target.complete();
      
    });